webpackHotUpdate("static\\development\\pages\\booking.js",{

/***/ "./pages/booking/index.js":
/*!********************************!*\
  !*** ./pages/booking/index.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Booking; });
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! styled-jsx/style */ "./node_modules/styled-jsx/style.js");
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_helmet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-helmet */ "./node_modules/react-helmet/lib/Helmet.js");
/* harmony import */ var react_helmet__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_helmet__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _components_Layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../components/Layout */ "./components/Layout.js");
var _jsxFileName = "C:\\Users\\Tariq\\Desktop\\dev\\stockholm_barber_front\\pages\\booking\\index.js";



function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





var Booking =
/*#__PURE__*/
function (_Component) {
  _inherits(Booking, _Component);

  function Booking() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Booking);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Booking)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      info: {},
      currentState: 1
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "nextState", function () {
      var nextState = _this.state.currentState + 1;
      console.log(_this.state.currentState);

      _this.setState({
        currentState: nextState
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "prevState", function () {
      var prevState = _this.state.currentState - 1;

      _this.setState({
        currentState: prevState
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "addBarber", function (barber) {
      _this.setState(function (prevState) {
        var newState = prevState;
        newState.info = _objectSpread({}, prevState.info, {
          barber: barber
        });
        return newState;
      });

      _this.nextState();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "addService", function (service) {
      _this.setState(function (prevState) {
        var newState = prevState;
        newState.info = _objectSpread({}, prevState.info, {
          service: service
        });
        return newState;
      });

      _this.nextState();
    });

    return _this;
  }

  _createClass(Booking, [{
    key: "render",
    value: function render() {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_components_Layout__WEBPACK_IMPORTED_MODULE_3__["default"], {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 44
        },
        __self: this
      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        id: "booking",
        className: "jsx-509872672",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 45
        },
        __self: this
      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "jsx-509872672" + " " + "container",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 46
        },
        __self: this
      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("script", {
        src: "//simplybook.it/v2/widget/widget.js",
        className: "jsx-509872672",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 58
        },
        __self: this
      }))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
        styleId: "509872672",
        css: "#booking.jsx-509872672{min-height:100.1vh;position:relative;background-image:url(/static/imgs/1.jpg);background-position:bottom left;background-repeat:no-repeat;background-size:cover;}h1.jsx-509872672{color:#fff;}.container.jsx-509872672{padding:100px 0;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=C:\\Users\\Tariq\\Desktop\\dev\\stockholm_barber_front\\pages\\booking\\index.js */",
        __self: this
      }));
    }
  }]);

  return Booking;
}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]);


var dummyBarbers = [{
  id: "1",
  name: "tariq",
  description: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Harum possimus earum quisquam? Quasi debitis dolores rerum quibusdam aliquid omnis blanditiis."
}, {
  id: "2",
  name: "Safana",
  description: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Harum possimus earum quisquam? Quasi debitis dolores rerum quibusdam aliquid omnis blanditiis."
}];

var ChooseBarber = function ChooseBarber(props) {
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-886286351",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 100
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h1", {
    className: "jsx-886286351",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 101
    },
    __self: this
  }, "V\xE4lj Barberare"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-886286351" + " " + "barber-container",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 102
    },
    __self: this
  }, dummyBarbers.map(function (barber, key) {
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      key: key,
      className: "jsx-886286351" + " " + "barber",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 104
      },
      __self: this
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "jsx-886286351" + " " + "img",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 105
      },
      __self: this
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "jsx-886286351" + " " + "content",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 106
      },
      __self: this
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
      className: "jsx-886286351" + " " + "name",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 107
      },
      __self: this
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("strong", {
      className: "jsx-886286351",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 108
      },
      __self: this
    }, barber.name)), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
      className: "jsx-886286351" + " " + "description",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 110
      },
      __self: this
    }, barber.description)), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("button", {
      onClick: function onClick(e) {
        props.addBarber(barber.id);
      },
      className: "jsx-886286351",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 112
      },
      __self: this
    }, "V\xE4lj"));
  })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    styleId: "886286351",
    css: "h1.jsx-886286351{color:#fff;}.barber.jsx-886286351{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;max-width:800px;margin:0 auto;background:#f6f6f6;margin-bottom:20px;padding:50px 50px;-webkit-flex-basis:80%;-ms-flex-preferred-size:80%;flex-basis:80%;position:relative;}.barber.jsx-886286351 button.jsx-886286351{position:absolute;right:0;bottom:0;border:none;padding:10px 30px;margin:0 20px 20px 0;font-size:20px;background:black;color:#fff;}.content.jsx-886286351{text-align:left;padding-left:30px;}.img.jsx-886286351{background-image:url(/static/imgs/barber1.jpg);background-position:top;background-repeat:no-repeat;background-size:cover;min-width:150px !important;width:150px;height:150px;border-radius:50%;margin:auto 0;margin-bottom:15px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=C:\\Users\\Tariq\\Desktop\\dev\\stockholm_barber_front\\pages\\booking\\index.js */",
    __self: this
  }));
};

var dummyService = [{
  id: "1",
  name: "Full Cut",
  description: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Harum possimus earum quisquam? Quasi debitis dolores rerum quibusdam aliquid omnis blanditiis."
}, {
  id: "2",
  name: "Half Cut",
  description: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Harum possimus earum quisquam? Quasi debitis dolores rerum quibusdam aliquid omnis blanditiis."
}];

var ChooseService = function ChooseService(props) {
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-1513868612",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 185
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h1", {
    className: "jsx-1513868612",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 186
    },
    __self: this
  }, "V\xE4lj Barberare"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-1513868612" + " " + "service-container",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 187
    },
    __self: this
  }, dummyService.map(function (service, key) {
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      key: key,
      className: "jsx-1513868612" + " " + "barber",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 189
      },
      __self: this
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "jsx-1513868612" + " " + "img",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 190
      },
      __self: this
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "jsx-1513868612" + " " + "content",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 191
      },
      __self: this
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
      className: "jsx-1513868612" + " " + "name",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 192
      },
      __self: this
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("strong", {
      className: "jsx-1513868612",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 193
      },
      __self: this
    }, service.name)), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
      className: "jsx-1513868612" + " " + "description",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 195
      },
      __self: this
    }, service.description)), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("button", {
      onClick: function onClick(e) {
        props.addService(service.id);
      },
      className: "jsx-1513868612",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 197
      },
      __self: this
    }, "V\xE4lj"));
  })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    styleId: "1513868612",
    css: "h1.jsx-1513868612{color:#fff;}.barber.jsx-1513868612{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;max-width:800px;margin:0 auto;background:#f6f6f6;margin-bottom:20px;padding:50px 50px;-webkit-flex-basis:80%;-ms-flex-preferred-size:80%;flex-basis:80%;position:relative;}.barber.jsx-1513868612 button.jsx-1513868612{position:absolute;right:0;bottom:0;border:none;padding:10px 30px;margin:0 20px 20px 0;font-size:20px;background:black;color:#fff;}.content.jsx-1513868612{text-align:left;padding-left:30px;}.img.jsx-1513868612{background-image:url(/static/imgs/barber1.jpg);background-position:top;background-repeat:no-repeat;background-size:cover;min-width:150px !important;width:150px;height:150px;border-radius:50%;margin:auto 0;margin-bottom:15px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=C:\\Users\\Tariq\\Desktop\\dev\\stockholm_barber_front\\pages\\booking\\index.js */",
    __self: this
  }));
};

var Confiramtion = function Confiramtion(props) {
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    id: "confirm",
    className: "jsx-3385554574",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 255
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-3385554574" + " " + "container",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 256
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h1", {
    className: "jsx-3385554574",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 257
    },
    __self: this
  }, "Booknings Bekr\xE4ftelse"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-3385554574" + " " + "confirm-container",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 258
    },
    __self: this
  }, console.log(props), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
    className: "jsx-3385554574",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 260
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("strong", {
    className: "jsx-3385554574",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 261
    },
    __self: this
  }, "Barberare"), " ", props.info.barber), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
    className: "jsx-3385554574",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 263
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("strong", {
    className: "jsx-3385554574",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 264
    },
    __self: this
  }, "tid"), " Random tid"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
    className: "jsx-3385554574",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 266
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("strong", {
    className: "jsx-3385554574",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 267
    },
    __self: this
  }, "Plats"), " Hornsgatan 97"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
    className: "jsx-3385554574",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 269
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("strong", {
    className: "jsx-3385554574",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 270
    },
    __self: this
  }, "Pris"), " 355kr"))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    styleId: "3385554574",
    css: ".container.jsx-3385554574{max-width:800px;width:80%;margin:0 auto;padding:30px;background:#f7f7f7;}.confirm-container.jsx-3385554574{padding;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=C:\\Users\\Tariq\\Desktop\\dev\\stockholm_barber_front\\pages\\booking\\index.js */",
    __self: this
  }));
};

var ChooseDate = function ChooseDate() {
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    id: "date",
    className: "jsx-1459346031",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 290
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h1", {
    className: "jsx-1459346031",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 291
    },
    __self: this
  }, "V\xE4lj Datum"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-1459346031" + " " + "container",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 292
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-1459346031" + " " + "date-header",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 293
    },
    __self: this
  }, "This is the date container"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-1459346031" + " " + "date-table-container",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 294
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("table", {
    className: "jsx-1459346031",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 295
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("tr", {
    className: "jsx-1459346031",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 296
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("th", {
    className: "jsx-1459346031",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 297
    },
    __self: this
  }, "M\xE5n"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("th", {
    className: "jsx-1459346031",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 298
    },
    __self: this
  }, "Tis"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("th", {
    className: "jsx-1459346031",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 299
    },
    __self: this
  }, "Ons"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("th", {
    className: "jsx-1459346031",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 300
    },
    __self: this
  }, "Tor"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("th", {
    className: "jsx-1459346031",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 301
    },
    __self: this
  }, "Fre"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("th", {
    className: "jsx-1459346031",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 302
    },
    __self: this
  }, "L\xF6r"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("th", {
    className: "jsx-1459346031",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 303
    },
    __self: this
  }, "S\xF6n")), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("tbody", {
    className: "jsx-1459346031",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 305
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("tr", {
    className: "jsx-1459346031",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 306
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("td", {
    className: "jsx-1459346031",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 307
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-1459346031" + " " + "day-times",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 308
    },
    __self: this
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(TableCol, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 309
    },
    __self: this
  })))))))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    styleId: "1459346031",
    css: "h1.jsx-1459346031{color:#fff;}.container.jsx-1459346031{width:80%;max-width:800px;background:#f7f7f7;margin:0 auto;}thead.jsx-1459346031{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:space-around;-webkit-justify-content:space-around;-ms-flex-pack:space-around;justify-content:space-around;}.time.jsx-1459346031{padding:20px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=C:\\Users\\Tariq\\Desktop\\dev\\stockholm_barber_front\\pages\\booking\\index.js */",
    __self: this
  }));
};

var double = function double(number) {
  if (number < 9) {
    return "0" + number;
  }

  return number;
};

var TableCol = function TableCol() {
  var col = [];
  var hour = 11;
  var minute = 5;

  for (var i = 0; i < 7; i++) {
    for (var j = 0; j < 12; j++) {
      col.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "time",
        name: hour + i + ":" + double(minute * j),
        key: hour + i + ":" + double(minute * j),
        id: hour + i + ":" + double(minute * j),
        onClick: function onClick(e) {
          console.log(e.target.id);
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 356
        },
        __self: this
      }, hour + i, ":", double(minute * j)));
    }
  }

  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "jsx-2003968617" + " " + "day-time-container",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 372
    },
    __self: this
  }, col, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    styleId: "2003968617",
    css: ".time{cursor:pointer;padding:5px 15px;border-radius:1px;margin:5px 10px;box-shadow:0px 0px 0px 1px rgba(0,0,0,0.2);}.time:hover{background:green;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=C:\\Users\\Tariq\\Desktop\\dev\\stockholm_barber_front\\pages\\booking\\index.js */",
    __self: this
  }));
};

var TableData = function TableData() {
  var table = [];

  for (var i = 0; i < 8; i++) {
    table.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("td", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 398
      },
      __self: this
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(TableRow, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 399
      },
      __self: this
    })));
  }

  return table;
};
/*
  TODO:
    date: {
      year: --,
      month: --,
      date: --,
      startTime:{
        hour: 11,
        min:00;
      },
      endTime: {
        hour: 12,
        min: 00
      },
    }

*/
    (function (Component, route) {
      if(!Component) return
      if (false) {}
      module.hot.accept()
      Component.__route = route

      if (module.hot.status() === 'idle') return

      var components = next.router.components
      for (var r in components) {
        if (!components.hasOwnProperty(r)) continue

        if (components[r].Component.__route === route) {
          next.router.update(r, Component)
        }
      }
    })(typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__.default : (module.exports.default || module.exports), "/booking\\index")
  
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ })

})
//# sourceMappingURL=booking.js.2927fa073f4b9f42d8a9.hot-update.js.map